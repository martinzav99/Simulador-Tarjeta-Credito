import (
    "encoding/json"
    "fmt"
    "log"
    bolt "github.com/coreos/bbolt"
    "strconv"
)

// STRUCTS - Sólo se marshalean los fields públicos

type Cliente struct {
    Nrocliente  int
    Nombre   	string
	Apellido   	string
	Domicilio 	string
	Telefono 	int
}

type Tarjeta struct {
    Nrotarjeta 		int
	Nrocliente 		int
    Validadesde 	int `json:"Desde: "`
	Validahasta 	int `json:"Hasta: "`
	Codseguridad 	int `json:"Codigo: "`
	Limitecompra 	float64
	Estado 			string
}

type Comercio struct {
    Nrocomercio int
    Nombre   	string
	Domicilio 	string
	Codpostal 	string
	Telefono 	int
}

type Compra struct {
	Nrooperacion 	int
	Nrotarjeta 		int
	Nrocomercio 	int
	Fecha 			string
    Monto 			float64
    Pagado 			bool
} 

//no se usa, se podría utilizar...
func crear_json_clientes(clientes []Cliente) { 
    data, err := json.MarshalIndent(clientes, "", "    ")
    if err != nil {
        log.Fatalf("JSON marshaling failed: %s", err)
    }
    //fmt.Printf("%s\n", data)

    var clientes2 []Cliente
    err = json.Unmarshal(data, &clientes2)
    if err != nil {
        log.Fatalf("JSON unmarshaling failed: %s", err)
    }
    //fmt.Printf("%v\n", clientes2)
}

//BoltDB

func main() {
    db, err := bolt.Open("tpgossz.db", 0600, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()

    var clientes_para_guardar []Cliente

    cliente1 := Cliente{1, 'Leandro',   'Sosa',     'Marco Sastre 4540',    541152774600}
    cliente2 := Cliente{2, 'Leonardo', 	'Sanabria', 'Gaspar Campos 1815',	541148611570}
    cliente3 := Cliente{3, 'Florencia', 'Knol', 	'Zapiola 2825', 		541148913800}

    clientes_para_guardar = append(clientes_para_guardar, cliente1, cliente2, cliente3)

    data, err := json.MarshalIndent(clientes_para_guardar, "", "    ")
    if err != nil {
        log.Fatalf("JSON marshaling failed: %s", err)
    }

    data, err := json.Marshal(cristina)
    if err != nil {
        log.Fatal(err)
    }

    CreateUpdate(db, "3 clientes", "1", data)
    //resultado, err := ReadUnique(db, "3 clientes", "1")
    //fmt.Printf("%s\n", resultado)


    var tarjetas_para_guardar []Tarjeta

    tarjetas1 := Tarjeta{5555899304583399, 1, 	'200911', '250221',	'1234', 100000.90, 'vigente'}
    tarjetas3 := Tarjeta{5269399188431044, 2, 	'190918', '240928',	'0334', 50000, 	'vigente'}
    tarjetas3 := Tarjeta{8680402479723030, 3, 	'180322', '230322',	'8214', 700000.12, 	'vigente'}

    tarjetas_para_guardar = append(tarjetas_para_guardar, tarjetas1, tarjetas2, tarjetas3)

    data, err := json.MarshalIndent(tarjetas_para_guardar, "", "    ")
    if err != nil {
        log.Fatalf("JSON marshaling failed: %s", err)
    }

    CreateUpdate(db, "3 tarjetas", "2", data)
    //resultado, err := ReadUnique(db, "3 tarjetas", "2")
    //fmt.Printf("%s\n", resultado)


    var comercios_para_guardar []Comercio

    comercio1 := Comercio{1, 'Farmacia Tell','Juncal 699',		'B1663',	541157274612}
    comercio2 := Comercio{2, 'Optica Bedini','Peron 781', 		'B1871',	541174654172}
    comercio3 := Comercio{3, 'Terravision',	'Urquiza 1361',	 	'B1221',	541183910808}

    comercios_para_guardar = append(comercios_para_guardar, comercio1, comercio2, comercio3)

    data, err := json.MarshalIndent(comercios_para_guardar, "", "    ")
    if err != nil {
        log.Fatalf("JSON marshaling failed: %s", err)
    }

    CreateUpdate(db, "3 comercios", "3", data)
    //resultado, err := ReadUnique(db, "3 comercios", "3")
    //fmt.Printf("%s\n", resultado)


    var compras_para_guardar []Compra

    compra1 := Compra{1, 5555899304583399,  12,	'02/01/2006', 2009.99,	    true}
    compra2 := Compra{2, 5269399188431044,  15, '02/01/2006', 500.45,	    true}
    compra3 := Compra{3, 8680402479723030,	7,	'02/01/2006', 1000000.00,	false}

    compra_para_guardar = append(compra_para_guardar, comercio1, comercio2, comercio3)

    data, err := json.MarshalIndent(compra_para_guardar, "", "    ")
    if err != nil {
        log.Fatalf("JSON marshaling failed: %s", err)
    }

    CreateUpdate(db, "3 compras", "4", data)
    //resultado, err := ReadUnique(db, "3 compras", "4")
    //fmt.Printf("%s\n", resultado)
}

func CreateUpdate(db *bolt.DB, bucketName string, key []byte, val []byte) error {
    // abre transacción de escritura
    tx, err := db.Begin(true)
    if err != nil {
        return err
    }
    defer tx.Rollback()

    b, err := tx.CreateBucketIfNotExists([]byte(bucketName))
    if err != nil {
        return err
    }

    err = b.Put(key, val)
    if err != nil {
        return err
    }

    // cierra transacción
    if err := tx.Commit(); err != nil {
        return err
    }

    return nil
}