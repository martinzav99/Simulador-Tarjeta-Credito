create or replace function a_de_compra(nrotarjetax char , codseguridadx char , nrocomerciox int , montox decimal) returns boolean as $$

declare
	montoCompraSum int;
	tarjetaRecord record;
	fechaActual date;
	timeActual timestamp;
	nrechazo int;
	noperacion int;
	montoTotal int;

begin
	select count (nrooperacion) into noperacion from compra;
	select count(nrorechazo) into nrechazo from rechazo;
	select current_date into fechaActual;

	select * from tarjeta into tarjetaRecord where nrotarjeta = nrotarjetax;

	if not found then
		select current_timestamp into timeActual;
		insert into rechazo values (nrechazo,nrotarjetax,nrocomerciox,timeActual,montox,'tarjeta no valida o no vigente');
		return false;
	elsif tarjetaRecord.codseguridad != codseguridadx then
		select current_timestamp into timeActual;
		insert into rechazo values (nrechazo,nrotarjetax,nrocomerciox,timeActual,montox,'codigo de seguridad invalido');
		return false;
	elsif CAST(tarjetaRecord.validahasta as date) < fechaActual then /* arreglar */
		select current_timestamp into timeActual;
		insert into rechazo values (nrechazo,nrotarjetax,nrocomerciox,timeActual,montox,'plazo de vigencia expirado');
		return false;
	elsif tarjetaRecord.estado = 'suspendida' then
		select current_timestamp into timeActual;
		insert into rechazo values (nrechazo,nrotarjetax,nrocomerciox,timeActual,montox,'la tarjeta se encuentra suspendida');
		return false;
	end if;
	
	select sum(monto) into montoCompraSum from compra where nrotarjeta=nrotarjetax and pagado = false;
	montoTotal := montoCompraSum + montox;

	if tarjetaRecord.limitecompra < montoCompraSum then
		select current_timestamp into timeActual;
		insert into rechazo values (nrechazo,nrotarjetax,nrocomerciox,timeActual,montox,'supera limite de tarjeta');
		return false;
	end if;
	
	select current_timestamp into timeActual;
	insert into compra values (noperacion,nrotarjetax,nrocomerciox,timeActual,montox,false);
	return true;

end;
$$language plpgsql;


/*

Problema :

select a_de_compra ('5555899304583398','1',10,2.0);

ERROR:  insert or update on table "rechazo" violates foreign key constraint "rechazo_nrotarjeta_fk"
DETAIL:  Key (nrotarjeta)=(5555899304583398) is not present in table "tarjeta".
CONTEXT:  SQL statement "insert into rechazo values (nrechazo,nrotarjetax,nrocomerciox,timeActual,montox,'tarjeta no valida o no vigente')"
PL/pgSQL function a_de_compra(character,character,integer,numeric) line 23 at SQL statement


funciona sin agregar pks y fks 


solucionado

*/



create or replace function generar_resumen(nroclientex int , mesx int , aniox int) returns void as $$

declare 

	ncliente record;
	ntarjeta record;
	ncierre record;
	ncomercio record;
	unaCompra record;
	
	fechaEnDate date;

	tarjetaEnText text;
	ultimoDigito text;
	deudaTotal int;
	nresumen int;
	nlinea int;
	digito int;

begin 

	select count(nroresumen) into nresumen from cabecera;
	
	select * into ncliente from cliente where nrocliente = nroclientex ;
	select * into ntarjeta from tarjeta where nrocliente = nroclientex and estado = 'vigente'; 
 
	tarjetaEnText := text (ntarjeta.nrotarjeta); /* paso a texto el numero de tarjeta*/
	select right(tarjetaEnText,1) into ultimoDigito; /*el ultimo digito*/
	digito := to_number(ultimoDigito,'9');    /*9 es formato de mascara*/


	select * into ncierre from cierre where anio = aniox and mes = mesx and terminacion = digito; 
	select sum(monto) into deudaTotal from compra where nrotarjeta = ntarjeta.nrotarjeta and pagado = false;

	insert into cabecera values (nresumen,ncliente.nombre,ncliente.apellido,ncliente.domicilio,ntarjeta.nrotarjeta,ncierre.fechainicio,ncierre.fechacierre,ncierre.fechavto,deudaTotal);


	for unaCompra in select * from compra loop
		if unaCompra.nrotarjeta = ntarjeta.nrotarjeta then					
			select * into ncomercio from comercio where nrocomercio = unaCompra.nrocomercio;
			select cast (unaCompra.fecha as date) into fechaEnDate;
			select count(nrolinea) into nlinea from detalle;
			insert into detalle values (nresumen,nlinea,fechaEnDate,ncomercio.nombre,unaCompra.monto);
		end if;
	end loop;
end;
$$ language plpgsql;


////////////////////////////////////////////////////////ALERTAS

CREATE OR REPLACE function generar_alerta_por_rechazo(); returns trigger as $$

declare
	nalerta int;
	ntarjeta varchar(16);
	fecha timestamp;
	nrechazo int;
	codalerta int;
	descripcion text;
begin 
	SELECT MAX(nroalerta) INTO nalerta FROM alerta;

	if not found then	
		nalerta := 0; 
	else 
		nalerta:= nalerta+1;	
	end if;

	SELECT MAX(nrorechazo) INTO nrechazo FROM rechazo;

	if not found then	
		nrechazo := 0; 

	SELECT nrotarjeta INTO ntarjeta WHERE nrorechazo = nrechazo;

	codalerta := 0; //codigo por rechazo

	fecha:= time.Now(); //duda

	descripcion := 'Alerta por rechazo';

	INSERT INTO alerta values (nalerta, ntarjeta, fecha, nrechazo, codalerta, descripcion);
	
end;
$$ language plpgsql;

CREATE TRIGGER alerta_por_rechazo()
AFTER INSERT ON rechazo
FOR EACH ROW
EXECUTE PROCEDURE generar_alerta_por_rechazo();

//dos compras en un lapso menor de un minuto en comercios ubicados en el mismo cÃ³digo postal y en 5 minutos con distinto codigo postal

CREATE OR REPLACE function generar_alerta_por_compras_irregulares(); returns trigger as $$

declare
	ultima_nrooperacion int;
	nalerta int;
	ntarjeta varchar(16);
	ultima_fecha timestamp;
	nrechazo int;
	codalerta int;
	descripcion text;
begin
	SELECT nrotarjeta INTO ntarjeta FROM compra WHERE nrooperacion = (SELECT MAX(nrooperacion) INTO ultima_nrooperacion FROM compra);

	SELECT fecha INTO ultima_fecha FROM compra WHERE nrooperacion = ultima_nrooperacion;
	
	(SELECT * FROM compra WHERE nrotarjeta = ntarjeta)

end;
$$ language plpgsql;

CREATE TRIGGER alerta_por_compras_irregulares()
AFTER INSERT ON compra
FOR EACH ROW
EXECUTE PROCEDURE generar_alerta_por_compras_irregulares();
